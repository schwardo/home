<?xml version="1.0"?>
    <implementation>
        <settings>
            <protocol>cr</protocol>
        </settings>
    <functions>
    local breatheAudioLib

    function add_children()
	    breatheAudioLib.createChildren()
    end
    
    function startup(lul_device)
        if (package.path:find ("/etc/cmh-ludl/?.lua;/etc/cmh-lu/?.lua", 1, true) == nil) then
	        package.path = package.path .. ";/etc/cmh-ludl/?.lua;/etc/cmh-lu/?.lua"
	    end
        package.loaded.L_BreatheAudioLib1 = nil
        breatheAudioLib = require("L_BreatheAudio1")
        breatheAudioLib.receiverStartup(lul_device)
    end

    </functions>
    <incoming>
    <lua>
        local dataLength = 0
        local data = tostring(lul_data)
        dataLength = string.len(data)
        if (dataLength ~= "") then
            breatheAudioLib.incoming_data(data)
        else
            breatheAudioLib.log("(incoming) No response received.")
        end
    </lua>
    </incoming>

    <startup>startup</startup>

    <actionList>
    <action>
    <serviceId>urn:micasaverde-com:serviceId:InputSelection1</serviceId>
    <name>Input1</name>
    <run>
      -- breatheAudioLib.sendZoneCommand(lul_device, 'SI', 'Input1', 'Input1')
    </run>
    </action>

    <action>
    <serviceId>urn:micasaverde-com:serviceId:InputSelection1</serviceId>
    <name>Input2</name>
    <run>
        -- breatheAudioLib.sendZoneCommand(lul_device, 'SI', 'Input2', 'Input2')
    </run>
    </action>

    <action>
    <serviceId>urn:micasaverde-com:serviceId:InputSelection1</serviceId>
    <name>Input3</name>
    <run>
        -- breatheAudioLib.sendZoneCommand(lul_device, 'SI', 'Input3', 'Input3')
    </run>
    </action>

    <action>
    <serviceId>urn:micasaverde-com:serviceId:InputSelection1</serviceId>
    <name>Input4</name>
    <run>
        -- breatheAudioLib.sendZoneCommand(lul_device, 'SI', 'Input4', 'Input4')
    </run>
    </action>

    <action>
    <serviceId>urn:micasaverde-com:serviceId:InputSelection1</serviceId>
    <name>Input5</name>
    <run>
        -- breatheAudioLib.sendZoneCommand(lul_device, 'SI', 'Input5', 'Input5')
    </run>
    </action>

    <action>
    <serviceId>urn:micasaverde-com:serviceId:InputSelection1</serviceId>
    <name>Input6</name>
    <run>
        -- breatheAudioLib.sendZoneCommand(lul_device, 'SI', 'Input6', 'Input6')
    </run>
    </action>

    <action>
    <serviceId>urn:micasaverde-com:serviceId:DiscretePower1</serviceId>
    <name>Off</name>
    <run>
        -- Power zone off
        breatheAudioLib.sendZoneCommand(lul_device, '*', 'OFF', 'Off')
    </run>
    </action>

    <action>
    <serviceId>urn:micasaverde-com:serviceId:DiscretePower1</serviceId>
    <name>On</name>
    <run>
        -- Power zone on
        breatheAudioLib.sendZoneCommand(lul_device, '*', 'ON', 'On')
    </run>
    </action>

    <action>
    <serviceId>urn:micasaverde-com:serviceId:Volume1</serviceId>
    <name>Mute</name>
    <run>
        local value = ((lul_settings.newTargetValue == '1') and 'ON' or 'OFF')
        breatheAudioLib.sendZoneCommand(lul_device, '', 'MU' .. value, 'Mute ' .. value)
    </run>
    </action>

    <action>
    <serviceId>urn:micasaverde-com:serviceId:Volume1</serviceId>
    <name>Up</name>
    <run>
        -- Volume up
        breatheAudioLib.sendZoneCommand(lul_device, 'MV', 'UP', 'Volume up')
    </run>
    </action>

    <action>
    <serviceId>urn:micasaverde-com:serviceId:Volume1</serviceId>
    <name>Down</name>
    <run>
        -- Volume down
        breatheAudioLib.sendZoneCommand(lul_device, 'MV', 'DOWN', 'Volume down')
    </run>
    </action>

    <action>
    <serviceId>urn:breatheaudio-com:serviceId:Receiver1</serviceId>
    <name>SetVolumeTarget</name>
    <run>
        breatheAudioLib.setVolume(lul_device, tonumber(lul_settings.newTargetValue))
    </run>
    </action>

    </actionList>
</implementation>
